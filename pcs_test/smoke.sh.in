#!@BASH@
set -ex

SCRIPT_DIR="$(dirname -- "$(realpath -- "$0")")"

cluster_user=hacluster
cluster_user_password=qa57Jk27eP
cluster_name="cluster-name"
pcsd_socket_path="@LOCALSTATEDIR@/run/pcsd.socket"
pcsd_settings_conf_path="@LOCALSTATEDIR@/lib/pcsd/pcs_settings.conf"
package_webui_backend="@PACKAGE_WEBUI_BACKEND@"

echo "${cluster_user_password}" | passwd --stdin "${cluster_user}";

pcs --help
pcs --version
pcs host auth localhost --debug -u ${cluster_user} -p ${cluster_user_password}
if pidof systemd | grep "\b1\b"; then
    # this command requires full system with proper init process
    pcs cluster setup ${cluster_name} localhost --debug
fi

output_file=$(mktemp)
token_file=$(mktemp)
cookie_file=$(mktemp)

# Sanity check of API V0
token=$(python3 -c "import json; print(json.load(open('@LOCALSTATEDIR@/lib/pcsd/known-hosts'))['known_hosts']['localhost']['token']);")
curl -kb "token=${token}" https://localhost:2224/remote/cluster_status_plaintext -d 'data_json={}' > "${output_file}"
cat "${output_file}"; echo ""
python3 -c "import json; import sys; json.load(open('${output_file}'))['status'] == 'exception' and (sys.exit(1))";

dd if=/dev/urandom bs=32 count=1 status=none | base64 > "${token_file}"
custom_localhost_node_name="custom-node-name"

pcs host auth "${custom_localhost_node_name}" addr=localhost --token "${token_file}"
pcs pcsd accept_token "${token_file}"
pcs pcsd status "${custom_localhost_node_name}" | grep "${custom_localhost_node_name}: Online"

# Test passing request body (raw_data) in ruby daemon
cat <<EOF > ${pcsd_settings_conf_path}
{
  "format_version": 2,
  "data_version": 1,
  "clusters": [
    {
      "name": "${cluster_name}",
      "nodes": [
        "localhost"
      ]
    }
  ],
  "permissions": {
    "local_cluster": [
      {
        "type": "group",
        "name": "haclient",
        "allow": [
          "grant",
          "read",
          "write"
        ]
      }
    ]
  }
}
EOF
cat ${pcsd_settings_conf_path}
pcs cluster start --all --wait

if [ "$package_webui_backend" = "True" ]; then
  # Webui backend check
  curl --insecure --data "username=${cluster_user}&password=${cluster_user_password}" --cookie-jar ${cookie_file} https://localhost:2224/ui/login
  curl --insecure --cookie ${cookie_file} --header "X-Requested-With: XMLHttpRequest" --data "hidden[hidden_input]=&config[stonith-enabled]=false" https://localhost:2224/managec/${cluster_name}/update_cluster_settings > "${output_file}"
  cat "${output_file}"; echo ""
  [ "$(cat ${output_file})" = "Update Successful" ]
fi

# Sanity check of API V1
curl -kb "token=${token}" https://localhost:2224/api/v1/resource-agent-get-agents-list/v1 --data '{}' > "${output_file}"
cat "${output_file}"; echo ""
python3 -c "import json; import sys; json.load(open('${output_file}'))['status'] != 'success' and (sys.exit(1))";

# Sanity check of API V2
# async
env "PCS_TEST.TEST_INSTALLED=1" ${SCRIPT_DIR}/api_v2_client resource_agent.get_agent_metadata '{"agent_name":{"standard":"ocf","provider":"pacemaker","type":"Dummy"}}'

# sync
env "PCS_TEST.TEST_INSTALLED=1" ${SCRIPT_DIR}/api_v2_client --sync resource_agent.get_agent_metadata '{"agent_name":{"standard":"ocf","provider":"pacemaker","type":"Stateful"}}'

# unix socket test
curl --unix-socket "${pcsd_socket_path}" http:/something/api/v1/resource-agent-get-agents-list/v1 --data '{}' > "${output_file}"
cat "${output_file}"; echo ""
python3 -c "import json; import sys; json.load(open('${output_file}'))['status'] != 'success' and (sys.exit(1))";

# make sure socket is not accessible by all users
useradd testuser
su testuser -c '! curl --unix-socket '"${pcsd_socket_path}"' http:/something/api/v1/resource-agent-get-agents-list/v1 --data '\''{}'\'''

# cleanup
rm "${token_file}"
rm "${output_file}"
rm "${cookie_file}"
rm "${pcsd_settings_conf_path}"
pcs cluster destroy --force
userdel -r testuser
exit 0

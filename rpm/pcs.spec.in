%global numcomm @numcomm@
%global alphatag @alphatag@
%global dirty @dirty@
%global cibranch @cibranch@
%global clean_version @version@
# We need to add a tilde before any non-numeric part of version for rpm to sort
# alpha and beta correctly
# The backslashes had to be doubled due to the way this is expanded
%global rpm_version %(echo %{clean_version} | sed -e 's/\\([[:alpha:]]\\)/~\\1/')

Name: pcs
Version: %{rpm_version}
Release: 99+git%{?numcomm:.%{numcomm}}%{?alphatag:.%{alphatag}}%{?dirty:.%{dirty}}%{?cibranch:.%{cibranch}}%{?dist}
# https://docs.fedoraproject.org/en-US/packaging-guidelines/LicensingGuidelines/
# https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses
# GPL-2.0-only: pcs
# Apache-2.0: dataclasses, tornado
# Apache-2.0 OR BSD-3-Clause: dateutil
# MIT: backports, childprocess, dacite, ethon, mustermann, rack, rackup,
#      rack-protection, rack-session, rack-test, sinatra, tilt
# MIT AND (BSD-2-Clause OR GPL-2.0-or-later): nio4r
# BSD-2-Clause: rexml
# BSD-2-Clause or Ruby: base64, ruby2_keywords, strscan
# BSD 3-Clause: puma
# BSD-3-Clause and MIT: ffi
# curl OR LGPL-2.1-or-later: python-pycurl
# Some gems we bundle are just dependencies of gems that we use,
# here is their dependency tree (we directly require the 1st level only):
# ethon:
#   ffi
# puma:
#   nio4r
# sinatra:
#   mustermann:
#     ruby2_keywords (might be included with Ruby)
#   rack
#   rack-protection
#   rack-session
#   tilt
# rack:
#   rackup (for Rack::Handler)
# rack-protection:
#   base64
# rexml:
#   strscan (might be included with Ruby)
License: GPL-2.0-only AND Apache-2.0 AND MIT AND BSD-2-Clause AND BSD-3-Clause AND (BSD-2-Clause OR GPL-2.0-or-later) AND (Apache-2.0 OR BSD-3-Clause) AND (BSD-2-Clause OR Ruby) AND (curl OR LGPL-2.1-or-later)
URL: https://github.com/ClusterLabs/pcs
Summary: Pacemaker/Corosync Configuration System

# Modification for running with alternative Python interpreter
# This defines macros that influence all other Python rpm macros
# Borrowed from vapor spec file
%if "@pyversion@" != ""
# This always contains the major.minor version (with dots), default for
# %%python3_version.
%define __default_python3_version @pyversion@

# Define the Python interpreter paths in the SRPM macros so that:
# - they can be used in Build/Requires
# - they can be used in non-Python packages where requiring pythonX-devel would
#   be an overkill
# use the underscored macros to redefine the behavior of %%python3_version etc.
%define __python3 %{_bindir}/python@pyversion@
%endif

%global pcs_snmp_pkg_name  pcs-snmp
%global pcs_standalone_webui_provider_pkg_name  pcs-standalone-webui-provider

%global pyagentx_version   @pyagentx_version@

%global pcs_bundled_dir @pcs_bundled_dir@

%global required_pacemaker_version 3.0.0


Source0: %{name}-%{clean_version}%{?numcomm:+%{numcomm}}%{?alphatag:-%{alphatag}}%{?dirty:-%{dirty}}.tar.gz

Source41: pyagentx-%{pyagentx_version}.tar.gz
@pysrc@

@gemsrc@

# python for pcs
BuildRequires: python%{python3_version}-devel
BuildRequires: python%{python3_version}-pip >= 23
BuildRequires: python%{python3_version}-setuptools >= 66.1

# for building wheel during make install
BuildRequires: (python%{python3_version}-wheel if python%{python3_version}-setuptools < 71)

# for bundling dateutil
%if "@cirpmworkarounds@" != "yes"
BuildRequires: python%{python3_version}-setuptools_scm
%endif

# for tier0 tests
BuildRequires: python%{python3_version}-cryptography
%if "@cirpmworkarounds@" != "yes"
BuildRequires: python%{python3_version}-pyparsing >= 3.0.0
%endif
# required to pass ./configure
BuildRequires: python%{python3_version}-lxml

# pycurl is not distributed in rhel 10
%if 0%{?rhel} >= 10
BuildRequires: libcurl-devel
BuildRequires: openssl-devel
%else
%if "@cirpmworkarounds@" != "yes"
BuildRequires: python%{python3_version}-pycurl
%endif
%endif

# for building pcs tarballs
BuildRequires: autoconf
BuildRequires: automake
BuildRequires: make
# coreutils usages:
# Makefile: printf, realpath, stat
# spec: head
BuildRequires: coreutils
# find is used in Makefile and also somewhere else
BuildRequires: findutils
# gcc for compiling custom rubygems
BuildRequires: gcc
BuildRequires: gcc-c++
BuildRequires: libffi-devel
# ruby and gems for pcsd
BuildRequires: ruby >= 3.1
BuildRequires: ruby-devel
BuildRequires: rubygems
BuildRequires: rubygem-bundler
# cluster stack packages for pkg-config
BuildRequires: pkgconfig(booth)
BuildRequires: pkgconfig(sbd)
BuildRequires: corosync-devel >= 3.0
%if 0%{?suse_version}
%if 0%{?suse_version} > 1500
BuildRequires: libpacemaker3-devel >= %{required_pacemaker_version}
%else
BuildRequires: libpacemaker-devel >= %{required_pacemaker_version}
%endif
%else
BuildRequires: pacemaker-libs-devel >= %{required_pacemaker_version}
%endif
# for systemd scriptlet macros
BuildRequires: systemd-rpm-macros
# for working with qdevice certificates (certutil) - used in configure.ac
%if 0%{?suse_version}
BuildRequires: mozilla-nss-tools
%else
BuildRequires: nss-tools
%endif
BuildRequires: pkgconf

Requires: python%{python3_version}-cryptography
Requires: python%{python3_version}-lxml
# pycurl is not distributed in rhel 10
%if 0%{?rhel} >= 10
%else
%if "@cirpmworkarounds@" != "yes"
Requires: python%{python3_version}-pycurl
%endif
%endif
%if "@cirpmworkarounds@" != "yes"
Requires: python%{python3_version}-pyparsing >= 3.0.0
%endif

# ruby and gems for pcsd
Requires: ruby >= 3.1
Requires: rubygems
# During its initialization, PycURL checks that the actual libcurl version
# is not lower than the one used when PycURL was built.
# Yes, that should be handled by library versioning (which would then get
# automatically reflected by rpm).
# For now, we have to reflect that dependency.
# Remove RC version suffixes, see: https://src.fedoraproject.org/rpms/python-pycurl/pull-request/11
%global libcurl_sed '/^#define LIBCURL_VERSION "/!d;s/"[^"]*$//;s/.*"//;s/-.*$//;q'
%global curlver_h /usr/include/curl/curlver.h
%global libcurl_ver %(sed %{libcurl_sed} %{curlver_h} 2>/dev/null || echo 0)
# this is replaced by Makefile.am and uses macros from above
@require_libcurl@
# for killall
Requires: psmisc
# cluster stack and related packages
Requires: pacemaker >= %{required_pacemaker_version}
Requires: corosync >= 3.0
# pcs enables corosync encryption by default so we require libknet1-plugins-all
Requires: libknet1-plugins-all
# pam is used for authentication inside daemon (python ctypes)
# more details: https://bugzilla.redhat.com/show_bug.cgi?id=1717113
Requires: pam
# needs logrotate for /etc/logrotate.d/pcsd
Requires: logrotate
# for working with qdevice certificates (certutil)
%if 0%{?suse_version}
Requires: mozilla-nss-tools
%else
Requires: nss-tools
%endif

@pybundle@

@gembundle@

%description
pcs is a corosync and pacemaker configuration tool.  It permits users to
easily view, modify and create pacemaker based clusters.

# pcs-snmp package definition
%package -n %{pcs_snmp_pkg_name}
Group: System Environment/Base
Summary: Pacemaker cluster SNMP agent
# https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses
# GPL-2.0-only: pcs
# BSD-2-Clause: pyagentx
License: GPL-2.0-only AND BSD-2-Clause
URL: https://github.com/ClusterLabs/pcs

Requires: pcs = %{version}-%{release}
Requires: pacemaker >= %{required_pacemaker_version}
Requires: net-snmp

Provides: bundled(pyagentx) = %{pyagentx_version}

%description -n %{pcs_snmp_pkg_name}
SNMP agent that provides information about pacemaker cluster to the master agent (snmpd)

%package -n %{pcs_standalone_webui_provider_pkg_name}
Summary: Standalone webui provider for Pacemaker/Corosync Configuration System
# https://docs.fedoraproject.org/en-US/packaging-guidelines/LicensingGuidelines/
# https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses
# GPL-2.0-only: pcs
License: GPL-2.0-only
URL: https://github.com/ClusterLabs/pcs

Requires: pcs = %{version}-%{release}

%description -n %{pcs_standalone_webui_provider_pkg_name}
Module for pcsd that provides support for standalone webui.

%prep
%autosetup -n %{name}-%{clean_version}%{?numcomm:+%{numcomm}}%{?alphatag:-%{alphatag}}%{?dirty:-%{dirty}}

# prepare dirs/files necessary for building all bundles
# -----------------------------------------------------
# 2) rubygems sources
rubymod=`pkg-config --list-all | awk '{print $1}' | grep ^ruby | sort -n | tail -n 1`
rubyver=`pkg-config --variable=ruby_version $rubymod`
@gemcache@

# 3) dir for python bundles
@pycache@

%build
%define debug_package %{nil}
./autogen.sh
%{configure} --enable-local-build --enable-use-local-cache-only \
  --enable-webui --with-python-version=@pyversion@
make all

%install
make install DESTDIR=%{buildroot}

# fix shebangs according to packaging guidelines
# add E to default Python arguments (-sP)
%global py3_shbang_opts_pcs %{py3_shbang_opts}E
%global py3_shbang_opts %{py3_shbang_opts_pcs}
%if 0%{?rhel} || 0%{?fedora}
# the script recurses directories, so shell globbing cannot be used for libdir
%py3_shebang_fix %{buildroot}/%{_sbindir}/* \
     $(find %{buildroot}/%{_libdir}/pcs -maxdepth 1 -type f)
%endif

%if %{defined suse_version}
rm -rf %{buildroot}/usr/share/doc/pcs/
%endif

# With this file there is "File is not stripped" problem during rpmdiff
# See https://docs.engineering.redhat.com/display/HTD/rpmdiff-elf-stripping
for fname in `find %{buildroot} -type f -name "*.so"`; do
  strip ${fname}
done
for dname in `find %{buildroot} -type d -name "ext"`; do
  rm -rf ${dname}
done

# prepare dynamic file list

mkdir -p dynamic_files

# pcs/pcsd
cat /dev/null > dynamic_files/pcs

# gem license files
for i in license gnu copying; do
 for x in `find %{buildroot} -type f -iname "${i}*" | grep ruby | grep -v dynamic_files`; do
  srcfile=`echo $x | sed -e 's#.*\/##g'`
  srcpkg=`echo $x | sed -e 's#.*gems/##g' -e 's/\(.*\)-\(.*\)/\1/'`
  mv $x dynamic_files/${srcpkg}_${srcfile}
  echo "@license dynamic_files/${srcpkg}_${srcfile}" >> dynamic_files/pcs
 done
done

# python modules licenses
for i in license; do
 for x in `find %{pcs_bundled_dir}/src -type f -iname "${i}*" | grep -v pyagentx`; do
  srcfile=`echo $x | sed -e 's#.*\/##g'`
  srcpkg=`echo $x | sed -e 's#.*src/##g' -e 's/\(.*\)-.*/\1/'`
  mv $x dynamic_files/${srcpkg}_${srcfile}
  echo "@license dynamic_files/${srcpkg}_${srcfile}" >> dynamic_files/pcs
 done
done

# python modules docs
# tornado has some extra README in the demos section
for i in readme contributors; do
 for x in `find %{pcs_bundled_dir}/src -type f -iname "${i}*" | grep -v pyagentx |grep -v demos`; do
  srcfile=`echo $x | sed -e 's#.*\/##g'`
  srcpkg=`echo $x | sed -e 's#.*src/##g' -e 's/\(.*\)-.*/\1/'`
  mv $x dynamic_files/${srcpkg}_${srcfile}
  echo "@doc dynamic_files/${srcpkg}_${srcfile}" >> dynamic_files/pcs
 done
done

# escaping % in spec file is "interesting"
sed -i -e 's#^@#%#g' dynamic_files/pcs

# pcs-snmp
cat /dev/null > dynamic_files/pcs-snmp

# python modules licenses
for i in license; do
 for x in `find %{pcs_bundled_dir}/src -type f -iname "${i}*" | grep pyagentx`; do
  srcfile=`echo $x | sed -e 's#.*\/##g'`
  srcpkg=`echo $x | sed -e 's#.*src/##g' -e 's/\(.*\)-.*/\1/'`
  mv $x dynamic_files/${srcpkg}_${srcfile}
  echo "@license dynamic_files/${srcpkg}_${srcfile}" >> dynamic_files/pcs-snmp
 done
done

# python modules docs
for i in readme contributors; do
 for x in `find %{pcs_bundled_dir}/src -type f -iname "${i}*" | grep pyagentx`; do
  srcfile=`echo $x | sed -e 's#.*\/##g'`
  srcpkg=`echo $x | sed -e 's#.*src/##g' -e 's/\(.*\)-.*/\1/'`
  mv $x dynamic_files/${srcpkg}_${srcfile}
  echo "@doc dynamic_files/${srcpkg}_${srcfile}" >> dynamic_files/pcs-snmp
 done
done

# escaping % in spec file is "interesting"
sed -i -e 's#^@#%#g' dynamic_files/pcs-snmp

# Sinatra contains example applications which are unnecessary (discovered by brp_mangle_shebangs)
rm -rfv %{buildroot}/%{_libdir}/pcsd/vendor/bundle/gems/sinatra-*/examples/
# Puma contains an unnecessary rc init script (discovered by brp_mangle_shebangs)
rm -rfv %{buildroot}/%{_libdir}/pcsd/vendor/bundle/gems/puma-*/docs/jungle/rc.d/
# Remove unused rubygem executables with wrong shebangs (discovered by brp_mangle_shebangs)
rm -fv %{buildroot}/%{_libdir}/pcsd/vendor/bundle/gems/puma-*/bin/puma
rm -fv %{buildroot}/%{_libdir}/pcsd/vendor/bundle/gems/puma-*/bin/pumactl
rm -fv %{buildroot}/%{_libdir}/pcsd/vendor/bundle/gems/rackup-*/bin/rackup
rm -fv %{buildroot}/%{_libdir}/pcsd/vendor/bundle/gems/tilt-*/bin/tilt


# Mark pcsd and pcs_snmp_agent for restart after upgrade
%posttrans
%systemd_posttrans_with_restart pcsd.service

%posttrans -n %{pcs_snmp_pkg_name}
%systemd_posttrans_with_restart pcs_snmp_agent.service

# Restart pcsd if it is running to reload the Tornado app so it detects
# presence or absence of the webui backend handler on install/update
# of pcs-web-ui that contains it
%posttrans -n %{pcs_standalone_webui_provider_pkg_name}
systemctl try-restart pcsd.service

# Runs only on pcs-web-ui uninstall
# https://docs.fedoraproject.org/en-US/packaging-guidelines/Scriptlets/
%postun -n %{pcs_standalone_webui_provider_pkg_name}
if [ $1 -eq 0 ] ; then
  systemctl try-restart pcsd.service
fi


%files -f dynamic_files/pcs
%doc CHANGELOG.md
%doc README.md
%license COPYING

# pcs
%{_sbindir}/pcs
%{python3_sitelib}/*
%{_libdir}/pcs/*
%{_libdir}/pkgconfig/pcs.pc
%exclude %{_libdir}/pcs/pcs_snmp_agent
%exclude %{_libdir}/pcs/%{pcs_bundled_dir}/packages/pyagentx*
%exclude %{python3_sitelib}/pcs/daemon/app/webui

# bash completion
%{_datadir}/bash-completion/completions/pcs

# man page
%{_mandir}/man8/pcs.*

# pcsd
%{_sbindir}/pcsd
%{_libdir}/pcsd/*

# config files
%config(noreplace) %{_sysconfdir}/logrotate.d/pcsd
%config(noreplace) %{_sysconfdir}/sysconfig/pcsd
%config(noreplace) %{_sysconfdir}/pam.d/pcsd

# systemd unit
%{_unitdir}/pcsd.service
%{_unitdir}/pcsd-ruby.service

# log dir
%ghost %attr(0700,root,root) %{_var}/log/pcsd

# var/lib/pcsd
%ghost %attr(0700,root,root) %{_sharedstatedir}/pcsd
%ghost %config(noreplace) %attr(0600,root,root) %{_sharedstatedir}/pcsd/cfgsync_ctl
%ghost %config(noreplace) %attr(0600,root,root) %{_sharedstatedir}/pcsd/known-hosts
%ghost %config(noreplace) %attr(0600,root,root) %{_sharedstatedir}/pcsd/pcsd.cookiesecret
%ghost %config(noreplace) %attr(0600,root,root) %{_sharedstatedir}/pcsd/pcsd.crt
%ghost %config(noreplace) %attr(0600,root,root) %{_sharedstatedir}/pcsd/pcsd.key
%ghost %config(noreplace) %attr(0644,root,root) %{_sharedstatedir}/pcsd/pcs_settings.conf
%ghost %config(noreplace) %attr(0600,root,root) %{_sharedstatedir}/pcsd/pcs_users.conf

# man page
%{_mandir}/man8/pcsd.*

%files -n %{pcs_snmp_pkg_name} -f dynamic_files/pcs-snmp
%{_libdir}/pcs/pcs_snmp_agent
%{_libdir}/pcs/%{pcs_bundled_dir}/packages/pyagentx*
%{_unitdir}/pcs_snmp_agent.service
%{_datadir}/snmp/mibs/PCMK-PCS*-MIB.txt
%{_mandir}/man8/pcs_snmp_agent.*
%config(noreplace) %{_sysconfdir}/sysconfig/pcs_snmp_agent
%doc CHANGELOG.md
%license COPYING

%files -n %{pcs_standalone_webui_provider_pkg_name}
%{python3_sitelib}/pcs/daemon/app/webui
%doc CHANGELOG.md
%license COPYING

%changelog
* @date@ Autotools generated version <nobody@nowhere.org> - @version@-1+@numcomm@.@alphatag@.@dirty@
- Autotools generated version
- These aren't the droids you're looking for.

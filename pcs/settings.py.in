import os.path

# generic system paths
chkconfig_exec = "/sbin/chkconfig"
find_exec = "@FIND@"
killall_exec = "@KILLALL@"
rm_exec = "@RM@"
ruby_exec = "@RUBY@"
service_exec = "@SERVICE@"
systemctl_exec = "@SYSTEMCTL@"
systemd_unit_path = "@SYSTEMD_UNIT_PATH@".split(":")
certutil_exec = "@CERTUTIL@"


# pcs
pcs_version = "@VERSION@"
pcs_bundled_packages_dir = os.path.join("@PCS_BUNDLED_DIR@", "packages")
pcs_data_dir = "@LIB_DIR@/pcs/data/"


# pcsd
pcsd_exec_location = "@LIB_DIR@/pcsd"
pcs_capabilities = os.path.join(pcsd_exec_location, "capabilities.xml")
# Set pcsd_gem_path to None if there are no bundled ruby gems and the path does
# not exists.
pcsd_gem_path = "@GEM_HOME@" or None
pcsd_unix_socket = "@LOCALSTATEDIR@/run/pcsd.socket"
pcsd_ruby_socket = "@LOCALSTATEDIR@/run/pcsd-ruby.socket"
pcsd_log_location = "@LOCALSTATEDIR@/log/pcsd/pcsd.log"
pcsd_default_port = 2224
pcsd_config = "@CONF_DIR@/pcsd"

pcsd_var_location = "@LOCALSTATEDIR@/lib/pcsd"
pcsd_cert_location = os.path.join(pcsd_var_location, "pcsd.crt")
pcsd_dr_config_location = os.path.join(pcsd_var_location, "disaster-recovery")
pcsd_key_location = os.path.join(pcsd_var_location, "pcsd.key")
pcsd_known_hosts_location = os.path.join(pcsd_var_location, "known-hosts")
pcsd_settings_conf_location = os.path.join(
    pcsd_var_location, "pcs_settings.conf"
)
pcsd_users_conf_location = os.path.join(pcsd_var_location, "pcs_users.conf")
webui_enabled = @WEBUI@

default_ssl_ciphers = "@PCSD_DEFAULT_CIPHERLIST@"
# Ssl options are based on default options in python (maybe with some extra
# options). Format here is the same as the PCSD_SSL_OPTIONS environment
# variable format (string with coma as a delimiter).
default_ssl_options = ",".join(
    [
        "OP_NO_COMPRESSION",
        "OP_CIPHER_SERVER_PREFERENCE",
        "OP_SINGLE_DH_USE",
        "OP_SINGLE_ECDH_USE",
        "OP_NO_SSLv2",
        "OP_NO_SSLv3",
        "OP_NO_TLSv1",
        "OP_NO_TLSv1_1",
        "OP_NO_RENEGOTIATION",
    ]
)
default_request_timeout = 60
gui_session_lifetime_seconds = 60 * 60
pcsd_token_max_bytes = 256

# pcsd task scheduler settings
async_api_scheduler_interval_ms = 100
pcsd_worker_count = 10
pcsd_temporary_workers = 10
pcsd_worker_reset_limit = 100
pcsd_deadlock_threshold_timeout = 5
task_unresponsive_timeout_seconds = 60 * 60
task_abandoned_timeout_seconds = 1 * 60
task_deletion_timeout_seconds = 1 * 60


# corosync
# Used only in settings.py and utils.py. Make it private once utils.py is removed.
corosync_execs = "@COROEXECPREFIX@/sbin"
corosync_conf_dir = "@COROCONFDIR@/corosync"
corosync_exec = os.path.join(corosync_execs, "corosync")
corosync_cfgtool_exec = os.path.join(corosync_execs, "corosync-cfgtool")
corosync_quorumtool_exec = os.path.join(corosync_execs, "corosync-quorumtool")
corosync_conf_file = os.path.join(corosync_conf_dir, "corosync.conf")
corosync_uidgid_dir = os.path.join(corosync_conf_dir, "uidgid.d")
corosync_authkey_file = os.path.join(corosync_conf_dir, "authkey")
# Must be set to 256 for corosync to work in FIPS environment.
corosync_authkey_bytes = 256
corosync_log_file = "@COROLOGDIR@/corosync.log"


# corosync qnetd and qdevice
corosync_qnet_execs = "@COROQDEVEXECPREFIX@/bin"
corosync_qnetd_certutil_exec = os.path.join(
    corosync_qnet_execs, "corosync-qnetd-certutil"
)
corosync_qnetd_tool_exec = os.path.join(
    corosync_qnet_execs, "corosync-qnetd-tool"
)
corosync_qdevice_execs = "@COROQDEVEXECPREFIX@/sbin"
corosync_qdevice_conf_dir = "@COROQDEVCONFDIR@"
corosync_qdevice_net_server_certs_dir = os.path.join(
    corosync_qdevice_conf_dir, "qnetd/nssdb"
)
corosync_qdevice_net_server_ca_file_name = "qnetd-cacert.crt"
corosync_qdevice_net_client_certs_dir = os.path.join(
    corosync_qdevice_conf_dir, "qdevice/net/nssdb"
)
corosync_qdevice_net_client_ca_file_name = "qnetd-cacert.crt"
corosync_qdevice_tool_exec = os.path.join(
    corosync_qdevice_execs, "corosync-qdevice-tool"
)
corosync_qdevice_net_certutil_exec = os.path.join(
    corosync_qdevice_execs, "corosync-qdevice-net-certutil"
)


# pacemaker
# Used only in settings.py and utils.py. Make it private once utils.py is removed.
pacemaker_execs = "@PCMKEXECPREFIX@/sbin"
pacemaker_authkey_file = "@PCMKCONFDIR@/pacemaker/authkey"
# Using the same value as for corosync. Higher values MAY work in FIPS.
pacemaker_authkey_bytes = 256
pacemaker_local_state_dir = os.path.join(
    "/", "@PCMKLOCALSTATEDIR@", "lib/pacemaker"
)
pacemaker_daemon_dir = "@PCMK_DAEMON_DIR@"
pacemaker_schedulerd_exec = os.path.join(
    pacemaker_daemon_dir, "pacemaker-schedulerd"
)
pacemakerd_exec = os.path.join(pacemaker_execs, "pacemakerd")
iso8601_exec = os.path.join(pacemaker_execs, "iso8601")
pacemaker_controld_exec = os.path.join(pacemaker_daemon_dir, "pacemaker-controld")
pacemaker_based_exec = os.path.join(pacemaker_daemon_dir, "pacemaker-based")
pacemaker_fenced_exec = os.path.join(pacemaker_daemon_dir, "pacemaker-fenced")
crm_resource_exec = os.path.join(pacemaker_execs, "crm_resource")
crm_mon_exec = os.path.join(pacemaker_execs, "crm_mon")
crm_report_exec = os.path.join(pacemaker_execs, "crm_report")
crm_rule_exec = os.path.join(pacemaker_execs, "crm_rule")
crm_diff_exec = os.path.join(pacemaker_execs, "crm_diff")
crm_simulate_exec = os.path.join(pacemaker_execs, "crm_simulate")
crm_ticket_exec = os.path.join(pacemaker_execs, "crm_ticket")
crm_verify_exec = os.path.join(pacemaker_execs, "crm_verify")
crm_node_exec = os.path.join(pacemaker_execs, "crm_node")
cibadmin_exec = os.path.join(pacemaker_execs, "cibadmin")
stonith_admin_exec = os.path.join(pacemaker_execs, "stonith_admin")
pacemaker_api_result_schema = "@PCMK_SCHEMA_DIR@/api/api-result.rng"
cib_dir = "@PCMK_CIB_DIR@"
pacemaker_uname = "@PCMK_USER@"
pacemaker_gname = "@PCMK_GROUP@"
pacemaker_wait_timeout_status = 124


# resource / stonith agents
fence_agent_execs = "@FASEXECPREFIX@/sbin"


# sbd
sbd_exec = "@SBDEXECPREFIX@/sbin/sbd"
sbd_config = "@SBDCONFDIR@/sbd"
# this limit is also mentioned in docs, change there as well
sbd_max_device_num = 3
# message types are also mentioned in docs, change there as well
sbd_message_types = ["test", "reset", "off", "crashdump", "exit", "clear"]
sbd_watchdog_default = "/dev/watchdog"


# booth
# Booth does not support keys longer than 64 bytes.
booth_authkey_bytes = 64
booth_authkey_file_mode = 0o600
booth_exec = "@BOOTHEXECPREFIX@/sbin/booth"
booth_config_dir = "@BOOTHCONFDIR@"
booth_enable_authfile_set_enabled = @BOOTH_ENABLE_AUTHFILE_SET_ENABLED@
booth_enable_authfile_unset_enabled = @BOOTH_ENABLE_AUTHFILE_UNSET_ENABLED@ or booth_enable_authfile_set_enabled


# path manager
_ocf_1_0_schema_filename = "ocf-1.0.rng"
_ocf_1_1_schema_filename = "ocf-1.1.rng"


class _PathManager:
    @property
    def ocf_1_0_schema(self):
        return os.path.join(pcs_data_dir, _ocf_1_0_schema_filename)

    @property
    def ocf_1_1_schema(self):
        return os.path.join(pcs_data_dir, _ocf_1_1_schema_filename)

    @property
    def pcs_data_dir(self):
        return pcs_data_dir


path = _PathManager()
